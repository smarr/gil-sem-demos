from threading import Thread, Barrier


class A:
    def get_int(self):
        return 1


class B:
    def get_int(self):
        return 2


def thread_fn(expected_int, obj, barrier):
    for _ in range(100_000):
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()

        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()

        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        assert expected_int == obj.get_int()
        barrier.wait()


shared_list = []
b = Barrier(2)
threads = [
    Thread(target=thread_fn, args=(1, A(), b)),
    Thread(target=thread_fn, args=(2, B(), b)),
]

for t in threads:
    t.start()
for t in threads:
    t.join()

print("Done")
